源代码
----------------------------------------------------------------------------------------
.. code-block:: java
 :linenos:

  package com.aliyun.odps.mapred.open.example;
  
  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.Iterator;
  import java.util.List;
  
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  
  import com.aliyun.odps.counter.Counter;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.TableInfo;
  import com.aliyun.odps.mapred.JobClient;
  import com.aliyun.odps.mapred.MapperBase;
  import com.aliyun.odps.mapred.ReducerBase;
  import com.aliyun.odps.mapred.TaskContext;
  import com.aliyun.odps.mapred.conf.JobConf;
  import com.aliyun.odps.mapred.utils.InputUtils;
  import com.aliyun.odps.mapred.utils.OutputUtils;
  import com.aliyun.odps.mapred.utils.SchemaUtils;
  
  /**
   * Join
   * 
   * To run: jar -resources odps-mapred-example-0.12.0.jar 
   * com.aliyun.odps.mapred.open.example.Join mr_join_src11 mr_join_src22 mr_join_out;
   * 
   */
  public class Join {
    public static final Log LOG = LogFactory.getLog(Join.class);
  
    public static class JoinMapper extends MapperBase {
      private Record mapkey;
      private Record mapvalue;
  
      @Override
      public void setup(TaskContext context) throws IOException {
        mapkey = context.createMapOutputKeyRecord();
        mapvalue = context.createMapOutputValueRecord();
      }
  
      @Override
      public void map(long key, Record record, TaskContext context)
          throws IOException {
        long tag = 1;
  
        String val = record.get(1).toString();
        if (val.startsWith("valb_")) {
          tag = 2;
        }
  
        mapkey.set(0, record.get(0));
        mapkey.set(1, tag);
  
        mapvalue.set(0, tag);
        for (int i = 1; i < record.getColumnCount(); i++) {
          mapvalue.set(i, record.get(i));
        }
  
        context.write(mapkey, mapvalue);
      }
  
    }
  
    public static class JoinReducer extends ReducerBase {
  
      private Record result = null;
  
      @Override
      public void setup(TaskContext context) throws IOException {
        result = context.createOutputRecord();
      }
  
      @Override
      public void reduce(Record key, Iterator<Record> values, TaskContext context)
          throws IOException {
        long k = (Long) key.get(0);
        List<Object[]> list1 = new ArrayList<Object[]>();
  
        Counter cnt = context.getCounter("MyCounters", "reduce_outputs");
        cnt.increment(1);
  
        while (values.hasNext()) {
          Record value = values.next();
          long tag = (Long) value.get(0);
  
          if (tag == 1) {
            list1.add(value.toArray().clone());
          } else {
            for (Object[] data1 : list1) {
              int index = 0;
              result.set(index++, k);
              for (int i = 1; i < data1.length; i++) {
                result.set(index++, data1[i]);
              }
              for (int i = 1; i < value.getColumnCount(); i++) {
                result.set(index++, value.get(i));
              }
              context.write(result);
            }
          }
        }
  
      }
  
    }
  
    public static void main(String[] args) throws Exception {
      if (args.length != 3) {
        System.err.println("Usage: Join <input table1> <input table2> <out>");
        System.exit(2);
      }
      JobConf job = new JobConf();
  
      job.setMapperClass(JoinMapper.class);
      job.setReducerClass(JoinReducer.class);
  
      job.setMapOutputKeySchema(SchemaUtils.fromString("key:bigint,tag:bigint"));
      job.setMapOutputValueSchema(SchemaUtils
          .fromString("tagx:bigint,value:string"));
  
      job.setPartitionColumns(new String[] { "key" });
      job.setOutputKeySortColumns(new String[] { "key", "tag" });
      job.setOutputGroupingColumns(new String[] { "key" });
  
      job.set("tablename2", args[1]);
  
      job.setNumReduceTasks(1);
      job.setInt("table.counter", 0);
  
      InputUtils.addTable(TableInfo.builder().tableName(args[0]).build(), job);
      InputUtils.addTable(TableInfo.builder().tableName(args[1]).build(), job);
      OutputUtils.addTable(TableInfo.builder().tableName(args[2]).build(), job);
  
      JobClient.runJob(job);
    }
  
  }
