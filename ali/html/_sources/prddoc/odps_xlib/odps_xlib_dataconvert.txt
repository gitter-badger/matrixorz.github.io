.. _odps_xlib_dataconvert:

格式转换
----------------
在XLab中，格式转换特指对这些对象：表(Table)、XLib稀疏矩阵表、XLib稠密矩阵表、三元组(Triple)表、索引三元组表、KV表、索引KV表的格式进行相互转换。

格式转换涉及：普通表与XLib稀疏矩阵表、XLib稠密矩阵表间的相互转换； 三元组(Triple)、索引三元组与XLib稀疏矩阵表、XLib稠密矩阵表间的相互转换；KV表、索引KV表与XLib稀疏矩阵表、XLib稠密矩阵表间的相互转换；KV表转三元组；XLib稀疏矩阵表与XLib稠密矩阵表间的相互转换。这些对象间的关系见转换图。

转换图
^^^^^^^^

.. image:: image/data_convert/convert-0.jpg


普通表转XLib稠密矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

 def tableToDenseMatrix(input, output, selectedColIndex = None):
       
参数:
         *   input: 输入普通表
         *   output: 输出表, 表需不存在
         *   selectedColIndex: (可选)输入表选列, 默认选所有列
    
示例:      
 
.. code-block:: python

  DataConvert.tableToDenseMatrix("appendinputleft", 
      "appendinputleft_dense", selectedColIndex=[0,1,2])


普通表转XLib稀疏矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def tableToSparseMatrix(input, output, selectedColIndex = None):

参数:

 * input: 输入普通表
 * output: 输出表, 表需不存在
 * selectedColIndex: (可选)输入表选列,  默认选所有列

示例:      
 
.. code-block:: python
 
  DataConvert.tableToSparseMatrix("appendinputleft", 
      "appendinputleft_out", selectedColIndex=[0,1,2])



XLib稠密矩阵表转普通表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  denseMatrixToTable(input, output, selectedColIndex = None): 

参数:
 * input: XLib稠密矩阵表
 * output: 输出表, 表需不存在
 * selectedColIndex: (可选)输入表选列, 默认选所有列   
 
示例:      
 
.. code-block:: python

  DataConvert.denseMatrixToTable("appendinputleft_dense", 
      "appendinputleft_dense_out", selectedColIndex=[0,1,2])




XLib稀疏矩阵表转普通表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

   def sparseMatrixToTable(input, output, selectedColIndex = None): 

参数:
  *  input: 输入XLib稀疏矩阵
  *  output: 输出表, 表需不存在
  *  selectedColIndex: (可选)输入表选列, 默认选所有列

示例:      
 
.. code-block:: python

   DataConvert.sparseMatrixToTable("appendinputleft_sparse", 
       "appendinputleft_sparse_out", selectedColIndex=[0,1,2])



XLib稀疏矩阵表转XLib稠密矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   def sparseMatrixToDenseMatrix(input, output, selectedColIndex = None): 

参数:
 * input: 输入XLib稀疏矩阵
 * output: 输出表, 表需不存在
 * selectedColIndex: (可选)输入表选列, 默认选所有列 

示例:      
 
.. code-block:: python

  DataConvert.sparseMatrixToDenseMatrix("appendinputleft_sparse", 
      "appendinputleft_sparse_out", selectedColIndex=[0,1,2])

		   
XLib稠密矩阵表转XLib稀疏矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def denseMatrixToSparseMatrix(input, output, selectedColIndex = None): 

参数:
 * input: 输入XLib稠密矩阵表
 * output: 输出表, 表需不存在
 * selectedColIndex: (可选)输入表选列, 默认选所有列
    
示例:      
 
.. code-block:: python

    DataConvert.denseMatrixToSparseMatrix("appendinputleft_dense", 
        "appendinputleft_dense_out", selectedColIndex=[0,1,2])


索引三元组表转稀疏矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

   def indexedTripleToSparseMatrix(indexedTriple, sparseMatrixName, 
       rName = None, cName=None, vName=None, partitions = None, nrow=None, ncol=None):
 

参数:
 * indexedTriple: 输入索引三元组
 * sparseMatrixName: 输出矩阵表名
 * rName: (可选)表示输入indexedTriple 行的列名   
 * cName: (可选)表示输入indexedTriple 列的列名
 * vName: (可选)表示输入indexedTriple 值的列名, 如果为二元组则vName为None
 * partitions: (可选)表示索引三元组的输入partition, 默认表示全选
 * nrow: (可选)输出稀疏矩阵行数, 默认表示由indexTriple数据自动生成行数, 否则nrow必须>=由indexTriple数据自动生成行数
 * ncol: (可选)输出稀疏矩阵列数, 默认表示由indexTriple数据自动生成列数, 否则ncol必须>=由indexTriple数据自动生成列数
    
示例:      
 
.. code-block:: python

  DataConvert.indexedTripleToSparseMatrix("indexedTriple_1", "sparse_1");
  DataConvert.indexedTripleToSparseMatrix("indexedTriple_1", "sparse_1", nrow=10000, ncol=100);

			
XLib稀疏矩阵表转索引三元组表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def sparseMatrixToIndexedTriple(sparseMatrixName, indexedTriple):

参数:
  * sparseMatrixName: 输入稀疏矩阵
  * indexedTriple: 输出三元组, 类型【long,  long, double】  

示例:      
 
.. code-block:: python

  DataConvert.sparseMatrixToIndexedTriple("sparse_table", "sparse_table_out");

索引三元组表+行map或列map表转三元组表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def indexedTripleToTriple(indexedTriple, rName, cName, vName, triple, 
    rowMap=None, rKey=None, rIndex=None, colMap=None, cKey=None, cIndex=None):
   

参数:
           * indexedTriple 输入索引三元组
           * rName: 表示输入indexedTriple 行的列名   
           * cName: 表示输入indexedTriple 列的列名
           * vName: 表示输入indexedTriple 值的列名, 如果为二元组则vName为None
           * triple: 输出三元组        
           * rowMap: (可选)输入行map表 ,  可选,  默认为None, 表示三元组行列为索引值, 无须转换
           * rKey: (可选)rowMap表中与triple对于的行名
           * rIndex: (可选)rowMap表中行索引列           
           * colMap: (可选)输入列map表, 可选, 默认为None, 表示三元组列列为索引值, 无须转换
           * cKey: (可选)colMap表中与triple对于的列名
           * cIndex: (可选)colMap表中列索引
    
示例:      
 
.. code-block:: python

  DataConvert.indexedTripleToTriple("index_triple_1", "col0", "col1", "col2", 
      "triple_out1", "rowMap", "rName", "rIndex", "colMap", "cName", "cIndex");
  DataConvert.indexedTripleToTriple("index_triple_2", "col0", "col1", "col2", 
      "triple_out2", "rowMap", "rName", "rIndex");
  DataConvert.indexedTripleToTriple("index_triple_3", "col0", "col1", "col2", 
      "triple_out3", colMap="colMap", cKey="cName", cIndex="cIndex");




获取三元组表的行map表或列map表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

   def getTripleMaps(triple, rName=None, rowMap=None, cName=None, colMap=None):

参数:
 *  triple: 三元组
 *  rName: (可选)行名
 *  rowMap: (可选)输出行map表
 *  cName: (可选)列名
 *  colMap: (可选)输出列map表    

示例:      
 
.. code-block:: python

  DataConvert.getTripleMaps("triple_1", rName="col0", rowMap="rowmap_out", 
    cName="col1",colMap="colmap_out")
  DataConvert.getTripleMaps("triple_1", rName="col0", rowMap="rowmap_out")
  DataConvert.getTripleMaps("triple_1", cName="col1", colMap="colmap_out")

三元组表转索引三元组表+行map或列map表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def tripleToIndexedTriple(triple, indexedTriple, rowMap=None, 
      colMap=None, rName = None, cName = None, vName = None):

参数:
  * triple: 三元组(类型为XXD 或 XXL 或 XX,  X表示任意类型,  D表示Double, L表示bigint)
  * indexedTriple: 输出索引三元组
  * rowMap: (可选)输出行map表,默认为None, 表示三元组行列为索引值, 无须转换, 即triple类型为LXD | LXL | LX
  * colMap: (可选)输出列map表, 默认为None, 表示三元组列列为索引值, 无须转换, 即triple类型为XLD | XLL | XL
  * rName: (可选)表示三元组行的列名
  * cName: (可选)表示三元组列的列名
  * vName: (可选)表示三元组值的列名
  * rName, cName, vName默认为None, 表示第0列为rName, 第一列cName, 如果存在第二列则为vName
  * 如果triple为二元组,  则vName为None

示例:      
 
.. code-block:: python

    DataConvert.tripleToIndexedTriple("triple_1","index_triple_out", 
        "rowmap_out","colmap_out")
    DataConvert.tripleToIndexedTriple("triple_2","index_triple_out", 
        colMap="colmap_out") 
    DataConvert.tripleToIndexedTriple("triple_3","index_triple_out", "rowmap_out")
    DataConvert.tripleToIndexedTriple("triple_4","index_triple_out", 
        "rowmap_out","colmap_out","col0","col1")


三元组表+行map或列map表转索引三元组表
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def tripleWithMapToIndexedTriple(triple, rName, cName, vName, indexedTriple, 
      rowMap=None, rKey=None, rIndex=None, colMap=None, cKey=None, cIndex=None):


参数:

  * triple: 三元组(类型为XXD+rowMap+colMap 或 XLD + rowMap 或者 LXD+colMap,  X表示任意类型,  D表示Double, L表示bigint)
  * rName: 表示三元组triple行的列名   
  * cName: 表示三元组triple列的列名
  * vName: 表示三元组triple值的列名
  * indexedTriple: 输出索引三元组
  * rowMap: (可选)输入行map表,默认为None, 表示三元组行列为索引值, 无须转换, 即triple类型为LXD | LXL | LX
  * rKey: (可选)rowMap表中与triple对于的行名
  * rIndex: (可选)rowMap表中行索引列           
  * colMap: (可选)输入列map表,默认为None, 表示三元组列列为索引值, 无须转换, 即triple类型为XLD | XLL | XL
  * cKey: (可选)colMap表中与triple对于的列名
  * cIndex: (可选)colMap表中列索引
  * rName, cName, vName默认为None, 表示第0列为rName, 第一列cName, 如果存在第二列则为vName
  * 如果triple为二元组,  则vName为None
    
示例:      
 
.. code-block:: python

  DataConvert.tripleWithMapToIndexedTriple("triple_1", "col0", "col1", "col2", 
      "indexedTriple_out", "rowMap", "rName", "rIndex", "colMap", "cName", "cIndex");

  DataConvert.tripleWithMapToIndexedTriple("triple_1", "col0", "col1", "col2", 
      "indexedTriple_out", "rowMap", "rName", "rIndex");

  DataConvert.tripleWithMapToIndexedTriple("triple_1", "col0", "col1", "col2", 
      "indexedTriple_out", colMap="colMap", cKey="cName", cIndex="cIndex");
 
KV表转稠密矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def KVToDenseMatrix(kvMatTableName, mapTableName, matTableName, 
     kvMatColsName=None, colDelimiter=None, valDelimiter=None, isAscii=False):
   
参数:
  *  kvMatTableName: 输入的kv表。
  *  mapTableName: map表。
  *  matTableName: 输出的稠密矩阵。
  *  kvMatColsName: (可选)kv表中被选中的列名。默认选中所有列。
  *  colDelimiter: (可选)列分割符。默认为","。
  *  valDelimiter: (可选)key-value分隔符。默认为":"。
  *  isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
       
示例:      
 
.. code-block:: python

  DataConvert.KVToDenseMatrix("kv_table_name", "map_table_name", 
      kvMatColsName = "out_matrix_name", kvMatColsName = ['col1'], 
      colDelimiter = ",", valDelimiter = ":", isAscii = False)
  

KV表转稀疏矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

 def KVToSparseMatrix(kvMatTableName, mapTableName, matTableName, 
     kvMatColsName=None, colDelimiter=None, valDelimiter=None, isAscii=False):
   
参数:
 * kvMatTableName: 输入的kv表。
 * mapTableName: map表。
 * matTableName: 输出的稀疏矩阵。
 * kvMatColsName: (可选)kv表中被选中的列名。默认选中所有列。
 * colDelimiter: (可选)列分割符。默认为","。
 * valDelimiter: (可选)key-value分隔符。默认为":"。
 * isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
          
示例:      
 
.. code-block:: python

 DataConvert.KVToSparseMatrix("kv_table_name", "map_table_name", 
     "out_matrix_name", kvMatColsName = ['col1'], colDelimiter = ",", 
     valDelimiter = ":", isAscii = False)
  
KV表转稀疏矩阵表(不需要map表)    
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def KVWithoutMapToSparseMatrix(kvMatName, colMapTableName, sparseMatrixName, 
      selectCols=None, colDelimiter=None, valDelimiter=None):
  
参数:
  * kvMatName: 输入表名
  * colMapTableName: 输出k值map表
  * sparseMatrixName: 输出sparse matrix表
  * selectCols: 输入kvMatName选择列
  * colDelimiter: kv对分隔符
  * valDelimiter: k,v间分隔符  

示例:      
 
.. code-block:: python

 DataConvert.KVWithoutMapToSparseMatrix("input_kv_table_name", "col_map_table_name", 
     "matrix_name", colDelimiter = ",", valDelimiter = ":")

  
索引KV表转稠密矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

 def indexedKVToDenseMatrix(kvMatTableName, matTableName, kvMatColsName=None, 
    colDelimiter=None, valDelimiter=None, isAscii=False):
   

参数:
  * kvMatTableName: indexed key-value表。
  * matTableName: 输出的稠密矩阵。
  * kvMatColsName: (可选)indexed key-value表被选中的列名。默认选中所有列。
  * colDelimiter: (可选)列分隔符。默认为","。
  * valDelimiter: (可选)key-value分隔符。默认为":"。
  * isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
 
示例:      
 
.. code-block:: python

   DataConvert.indexedKVToDenseMatrix("kv_table_name", "out_matrix_name", 
       kvMatColsName = ['col1'], colDelimiter = ",", valDelimiter = ":", isAscii = False)
 

索引KV表转稀疏矩阵表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def indexedKVToSparseMatrix(kvMatTableName, matTableName, kvMatColsName=None, 
      colDelimiter=None, valDelimiter=None, isAscii=False):
  
参数:
  *   kvMatTableName: indexed key-value表。
  *   matTableName: 输出的稀疏矩阵。
  *   kvMatColsName: (可选)indexed key-value表被选中的列名。默认选中所有列。
  *   colDelimiter: (可选)列分隔符。默认为","。
  *   valDelimiter: (可选)key-value分隔符。默认为":"。
  *   isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
          
示例:      
 
.. code-block:: python

  DataConvert.indexedKVToSparseMatrix("kv_table_name", "out_matrix_name", 
      kvMatColsName = ['col1'], colDelimiter = ",", valDelimiter = ":", isAscii = False)



矩阵表转索引KV表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def matrixToIndexedKV(matTableName, kvMatTableName, colDelimiter=None, 
      valDelimiter=None, isAscii=False, kvTableColNum=None):
  
参数:
  * matTableName: 矩阵表。
  * kvMatTableName: indexed key-value表。
  * colDelimiter: (可选)列分割符。列分割符。默认为","。
  * valDelimiter: (可选)key-value分隔符。默认为":"。
  * isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
  * kvTableColNum: (可选)输出表的列数。如果不指定这个参数，那么本方法计算能完整存储kv所需要的列数。如果指定，则按照指定的列来存储kv。
              
示例:      
 
.. code-block:: python

  DataConvert.matrixToIndexedKV("input_matrix_name", "out_kv_table_name", 
      colDelimiter = ",", valDelimiter = ":", isAscii = False, kvTableColNum = 1)
    

矩阵表转KV表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

 def matrixToKV(matTableName, kvMatTableName, mapTableName, 
     mapSelectedCols = None, colDelimiter=None, valDelimiter=None, 
     isAscii=False, kvTableColNum=None):
   
参数:
 * matTableName: 矩阵表。
 * kvMatTableName: key-value表。
 * mapTableName: 列号列名对应map表。
 * mapSelectedCols: (可选)mapTableName中这些列来表示map关系。默认选中所有列。
 * colDelimiter: (可选)列分割符。默认为","。
 * valDelimiter: (可选)key-value分隔符。默认为":"。
 * isAscii: (可选)分隔符是否为ascii码。默认为False。如果为True，则colDelimiter和valDelimiter为ascii码的字符串，如colDelimiter="44"。
 * kvTableColNum: (可选)输出表的列数。如果不指定这个参数，那么本方法计算能完整存储kv所需要的列数。如果指定，则按照指定的列来存储kv。
 
示例:      
 
.. code-block:: python

 DataConvert.matrixToKV("input_matrix_name", "out_kv_table_name", "map_table_name", 
     mapSelectedCols = ['col1', 'col2'], colDelimiter = ",", valDelimiter = ":", 
     isAscii = False, kvTableColNum = 1)



KV表转三元组表
^^^^^^^^^^^^^^^^^^^^^^^^^
.. code-block:: python

  def KVToTriple(kvTableName, colSeparator, vSeparator, outputTriple, selectedColsIndex=None, trim=False):
     
参数:
  * kvTableName: 输入kv表
  * selectedColsIndex: 输入变选列, 必须列为String类型
  * colSeparator: kv对之间分隔符, 必须输入
  * vSeparator: k, v之间分隔符, 如果为空则表示输出无value列
  * trim: 是否忽略分隔符前后空格
  * outputTriple: 输出三元组或者二元组表名, 必须输入

示例:      
 
.. code-block:: python

 DataConvert.KVToTriple("input_kv_table_name", ",", ":", "output_triple_name")

