.. _xlib_matrix_cal:

矩阵计算
=================
在XLab中，矩阵计算主要支持这些运算：矩阵构造，获取矩阵信息(类型、行数、列数和非零元数目) 打印矩阵信息(矩阵类型、行数、列数和非零元数目)， 加减乘除运算，向量点积，矩阵和向量范数，矩阵的迹，矩阵转置，矩阵的svd分解。有关矩阵定义，请参考 `矩阵 <http://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5>`_ 。


* 矩阵构造
	
.. code-block:: python
	
    a = Matrix("mat_a")
    a = Matrix("table_a", partitions = ["ds=20140320","ds=20140321","ds=20140322"], colNames = ["col1", "col2", "col3"])
    a = Matrix.rand(1000, 100)
    a = Matrix.rand(1000, 100, 0.1)
	
	
	
* 获取矩阵信息(类型、行数、列数、非零元数目)
	
.. code-block:: python

    a.matrixType()
    a.rowSize()
    a.colSize()
    a.nonZero()
	
	
* 打印矩阵信息(矩阵类型、行数、列数、非零元数目)
	
.. code-block:: python

    print a
	

* 将矩阵存取到表
	
.. code-block:: python

    a.saveTo("matrix_name")
	
	
* 加、减、乘、除运算
 	
.. code-block:: python

    c = a + b
    c = a - b
    c = a*b
    c = a*num
    c = a/num


* 向量点积
 	
.. code-block:: python

    num = Matrix.dot(v1, v2)
	

* 矩阵和向量范数

.. code-block:: python

    num = a.norm("1")
    num = a.norm("2")
    num = a.norm("Inf")
    num = a.norm("fro")
	
	
* 向量范数
   	
.. code-block:: python

    num = a.norm(p), p = '3','4','5',...
    num = a.norm("-Inf")
	

* 矩阵的迹
   	
.. code-block:: python

    num = a.trace()
	

* 矩阵转置
   	
.. code-block:: python

    c = a.transpose()


* 矩阵的svd分解
  	
.. code-block:: python

    [u,s,v] = a.svd()
    [u,s,v] = a.svd(10)
    [u,s,v] = a.svd(10, 1.0e-04)



函数
^^^^^^^^^^^^^^^^

矩阵运算支持以下函数，具体使用方法，可用help命令查看，示例：

.. code-block:: python

    help(Matrix.rowSize)
    help(Matrix.colSize)
    help(Matrix.matrixType)
    help(Matrix.transpose)
    help(Matrix.rand)
    help(Matrix.dot)
    help(Matrix.svd)
    help(Matrix.trace)
    help(Matrix.norm)
    help(Matrix.saveTo)



获取矩阵行数
"""""""""""""""""""""

.. code-block:: python

    def rowSize(self):


返回:

   * 矩阵的行数
    
示例:      
 
.. code-block:: python

    m = 10
    n = 5
    a = Matrix.rand(m, n)
    ## 打印结果为：10
    print a.rowSize()
	

获取矩阵列数
""""""""""""""""""""

.. code-block:: python

 def colSize(self):


返回:

    * 矩阵的列数
    

示例:      
 
.. code-block:: python

    m = 10
    n = 5
    a = Matrix.rand(m, n)
    ## 打印结果为：5
    print a.colSize()


获取矩阵类型
""""""""""""""""""

.. code-block:: python

 def matrixType(self):


返回:
    * 矩阵的类型；稠密矩阵为"dense"，稀疏矩阵为"sparse"
    

示例1:      
 
.. code-block:: python

    a = Matrix.rand(10, 5, 0.5)
    ## 打印结果为： "sparse"
    print a.matrixType()
	
	
示例2:      
 
.. code-block:: python

    b = Matrix.rand(10, 5)
    ## 打印结果为："dense"
    print a.matrixType()


	
获取矩阵非零元素数目
""""""""""""""""""""""""""

.. code-block:: python

 def nonZero(self):


返回:
    * 矩阵的非零元素数目；稠密矩阵的非零元素数目等于行数乘列数；
  

示例1:      
 
.. code-block:: python

    a = Matrix.rand(10, 5)
    ## 打印结果：50
    print a.nonZero()
	
	
示例2:      
 
.. code-block:: python

    a = Matrix.rand(10, 5, 0.2)
    ## 打印结果：10
    print a.nonZero


	
矩阵转置
"""""""""""""""""""

.. code-block:: python

 def transpose(self):


返回:
    * 矩阵的转置阵
  

示例1:      
 
.. code-block:: python

    a = Matrix.rand(10, 5)
    b = a.transpose()
    ## 打印结果为：5
    print b.rowSize()
    ## 打印结果为：10
    print b.colSize()
	
	
示例2:      
 
.. code-block:: python

    a = Matrix.rand(10, 5)
    b = a.transpose()
    c = b.transpose()
    ## a 和 c 相等


	
产生随机矩阵
""""""""""""""""""

.. code-block:: python

 def rand(m, n, ratio = -1):


参数:   
    * m: 矩阵行数
    * n: 矩阵列数
    * ratio: (可选) 矩阵的稀疏度，也就是非零元素的比例；默认情况下，将产生稠密矩阵

返回:
    * 随机产生的矩阵
  

示例1:      
 
.. code-block:: python

    ## 产生一个10行5列的稠密矩阵
    a = Matrix.rand(10, 5)
	
示例2:      
 
.. code-block:: python

    ## 产生一个10行5列，稀疏度为0.2的稀疏矩阵，也就是只有20%的元素是非零的
    a = Matrix.rand(10, 5, 0.2)


向量点积
"""""""""""

.. code-block:: python

 def dot(a, b):


参数:   
    * a: 矩阵a，列数必须是1
    * b: 矩阵b，列数必须是1
   
返回:
    * 向量的点积值；向量就是列数为1的矩阵；
  

示例:      
 
.. code-block:: python

    ## 随机产生一个10行的向量v1
    v1 = Matrix.rand(10, 1)
    ## 随机产生另一个10行的向量v2
    v2 = Matrix.rand(10, 1)
    ## 打印v1和v2的点积
    print Matrix.dot(v1, v2)
	
	
	
矩阵的svd分解
"""""""""""""""""""""""

.. code-block:: python

 def svd(self, k = -1, tol = 0):


参数:   
    * k: (可选) 部分奇异值分解中，期望求解的top奇异组数目；默认求解全部奇异组；
    * tol: (可选) 部分奇异值分解中，期望的误差精度；默认为1.0e-06

   
返回:
    * 奇异组组成的矩阵数组
  

示例1:      
 
.. code-block:: python

    a = Matrix("mat_a")
    ## 求矩阵a的全部奇异组
    [u,s,v] = a.svd()
    b = u*s*v.tanspose()-a
    ## num 应该接近0，因为 u*s*v' = a
    num = b.norm('fro')
	
示例2:      
 
.. code-block:: python

    ## 从表名 mat_a 中获取的矩阵
    a = Matrix("mat_a")
    ## 求矩阵a的top 10 奇异组
    [u,s,v] = a.svd(10)
	
示例3:      
 
.. code-block:: python

    ## 求取 表mat_a中矩阵的 top 10 奇异组，且期望精度为1.0e-04
    a = Matrix("mat_a")
    [u,s,v] = a.svd(10, 1.0e-04)

求矩阵的迹
""""""""""""""""""""""""""""""""""""""

.. code-block:: python

 def trace(self):


返回:
    * 矩阵的迹，也就是矩阵对角线元素之和；要求矩阵必须是方阵，也就是行数需要等于列数；
  

示例:      
 
.. code-block:: python

    a = Matrix("mat_a")
    ## 打印矩阵a的迹
    print a.trace()

	
向量或者矩阵的范数
""""""""""""""""""""""""""""

.. code-block:: python

 def norm(self, normType)


参数: 
    * normType: 范数类型字符串；对于矩阵和向量，支持的范数类型有："1","2","Inf","fro"；此外，对于向量，支持的范数类型还有："-Inf","p"(p=3,4,5,...)
   
   
返回:
    * 矩阵或者向量(列数为1的矩阵)的指定类型的范数
  

示例1:      
 
.. code-block:: python

    a = Matrix.rand(1000, 100)
    [u,s,v] = a.svd(1)
    ## 打印结果近似为0，因为矩阵的2范数就是矩阵的最大奇异值
    print s.trace()-a.norm('2')

	
	
示例2:      
 
.. code-block:: python

    a = Matrix.rand(1000, 1)
    # 打印结果近似为0，因为向量的Frobineous范数和2范数是相等的；
    print a.norm('fro')-a.norm('2')

	
存取矩阵到表
"""""""""""""""""""""""

.. code-block:: python

 def saveTo(self, tableName):


参数:  
    * tableName: 矩阵存储的目标表  
   
示例:      
 
.. code-block:: python

    a = Matrix.rand(1000, 1000)
    ## 将随机生成的一个1000x1000的矩阵，存取到表 "mat_a"
    a.saveTo("mat_a")

