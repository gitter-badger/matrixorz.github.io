<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Just Pic</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2014-04-12T15:47:58+08:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>open toolchain on ubuntu 12.04</title>
   <link href="http://username.github.io/2014/04/12/open-toolchain-on-ubuntu-1204"/>
   <updated>2014-04-12T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/04/12/open-toolchain-on-ubuntu-1204</id>
   <content type="html">
&lt;p&gt;在ubuntu 12.04上先安装gcc-4.8，然后安装llvm,clang,libcxx,libcxxabi.由于libcxx和libcxxabi相互依赖，需要两次安装libcxx。最后安装theos等开放的ios开发工具链&lt;/p&gt;

&lt;p&gt;安装gcc-4.8如前文所述&lt;a href=&quot;/2014/04/02/gcc-48-on-ubuntu/&quot;&gt;install gcc4.8 on ubuntu 12.04&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;llvmclang&quot;&gt;安装llvm,clang&lt;/h2&gt;
&lt;p&gt;/etc/apt/sources.list中添加如下两行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main
deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main 检索签名：

wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装与llvm-3.4,clang-3.4相关的所有包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install clang-3.4 clang-3.4-doc libclang-common-3.4-dev libclang-3.4-dev libclang1-3.4 libclang1-3.4-dbg libllvm-3.4-ocaml-dev libllvm3.4 libllvm3.4-dbg lldb-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-doc llvm-3.4-examples llvm-3.4-runtime clang-modernize-3.4 clang-format-3.4 python-clang-3.4 lldb-3.4-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装libcxx：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx 查看g++使用的头文件：

echo | g++ -Wp,-v -x c++ - -fsyntax-only 将会输出类似如下结果：

ignoring nonexistent directory &quot;/usr/local/include/x86_64-linux-gnu&quot;
ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux- gnu/4.8/../../../../x86_64-linux-gnu/include&quot;
### #include &quot;...&quot; search starts here:
### include &amp;lt;...&amp;gt; search starts here:
/usr/include/c++/4.8
/usr/include/c++/4.8/x86_64-linux-gnu
/usr/include/c++/4.8/backward
/usr/lib/gcc/x86_64-linux-gnu/4.8/include
/usr/local/include
/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed
/usr/include/x86_64-linux-gnu
/usr/include
End of search list. 编译安装libcxx：

CC=clang CXX=clang++ cmake -G &quot;Unix Makefiles&quot; -DLIBCXX_CXX_ABI=libsupc++ - DLIBCXX_LIBSUPCXX_INCLUDE_PATHS=&quot;/usr/include/c++/4.7/;/usr/include/x86_64-linux- gnu/c++/4.7/&quot; -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr &amp;lt;libc++-source-dir&amp;gt;
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装libcxxabi&lt;/p&gt;

&lt;p&gt;首先安装相关依赖：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install g++ subversion cmake swig python-dev libedit-dev libunwind8 libunwind8-dev 下载源码并编译：

svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi
cd libcxxabi/lib
./buildit
sudo cp libc++abi.so.1.0 /usr/lib
sudo ln -s /usr/lib/libc++abi.so.1.0 /usr/lib/libc++abi.so.1
sudo ln -s /usr/lib/libc++abi.so.1 /usr/lib/libc++abi.so 使用libc++abi来安装libc++

svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
cd libcxx
mkdir build
cd build
CC=clang CXX=clang++ cmake -G &quot;Unix Makefiles&quot; -DLIBCXX_CXX_ABI=libcxxabi -  DLIBCXX_LIBCXXABI_INCLUDE_PATHS=&quot;&amp;lt;libc++abi-source-dir&amp;gt;/include&quot; -  DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此ubuntu 12.04上的LLVM环境就算搭建好了。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>new post</title>
   <link href="http://username.github.io/2014/04/12/new-post"/>
   <updated>2014-04-12T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/04/12/new-post</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>mysql使用总结</title>
   <link href="http://username.github.io/2014/04/04/mysqldump-summary"/>
   <updated>2014-04-04T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/04/04/mysqldump-summary</id>
   <content type="html">
&lt;h2 id=&quot;mysql&quot;&gt;Mysql导入导出&lt;/h2&gt;
&lt;p&gt;导出所有库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump -uusername -ppassword --all-databases&amp;gt;all.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入所有库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;source all.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出某些库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump -uusername -ppassword --databases db1 db2 &amp;gt;db1db2.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入某些库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;source db1db2.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入某个库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -uusername -ppassword db1&amp;lt;db1.sql;
mysql&amp;gt;source db1.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出某个库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqldump -uusername -ppassword db1 table1 table2&amp;gt;tb1tb2.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导入某些数据表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -uusername -ppassword db1&amp;lt;tb1tb2.sql
mysql&amp;gt;user db1;
mysql&amp;gt;source tb1tb2.sql;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mysqldump字符集设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$mysqldump -uusername -ppassword --default-character-set=utf-8 db1 table1&amp;gt;tb1.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mysql-1&quot;&gt;Mysql用户管理&lt;/h2&gt;
&lt;p&gt;创建用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;phplamp&quot;,password(&quot;1234&quot;));
mysql&amp;gt;grant all privileges on *.* to jee@localhost identified by ‘123′；
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改用户密码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;
mysql&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>gcc 4.8 on ubuntu</title>
   <link href="http://username.github.io/2014/04/02/gcc-48-on-ubuntu"/>
   <updated>2014-04-02T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/04/02/gcc-48-on-ubuntu</id>
   <content type="html">
&lt;pre&gt;&lt;code&gt; sudo apt-get install python-software-properties
 sudo add-apt-repository ppa:boost-latest/ppa
 sudo apt-get update
 sudo apt-get install libboost1.55-all-dev
 sudo add-apt-repository ppa:ubuntu-toolchain-r/test
 sudo apt-get update
 sudo apt-get install gcc-4.8 g++-4.8
 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6 
 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
 sudo update-alternatives --config gcc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完gcc-4.8后即可安装llvm-3.4 参考 &lt;a href=&quot;&quot;&gt;llvm/apt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载&lt;a href=&quot;&quot;&gt;osxcross&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译出现错误： fatal error:limits can’t find?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $echo &#39;#include &amp;lt;limits.h&amp;gt;&#39; | clang -v -xc -o /dev/null -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用上述命令排错，依依对照toolchain查找的include顺序，修改include链接，即可解决问题&lt;/p&gt;

&lt;p&gt;一个查找文件的有用命令:
    $grep notification &lt;code&gt;find ./*&lt;/code&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>install windows/linux with usb</title>
   <link href="http://username.github.io/2014/04/01/install-windowslinux-with-usb"/>
   <updated>2014-04-01T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/04/01/install-windowslinux-with-usb</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://github.com/pbatard/rufus/&quot;&gt;rufus&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.owasp.org/images/d/dc/AppsecEU09-Damele-A-G-Advanced-SQL-injection-slides.pdf&quot;&gt;sql injection&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sample draft post</title>
   <link href="http://username.github.io/posts/2014/02/25/draft"/>
   <updated>2014-02-25T00:00:00+08:00</updated>
   <id>http://username.github.io/posts/2014/02/25/draft</id>
   <content type="html">&lt;p&gt;This is a draft post that isn’t ready for the wild. See how it doesn’t show up in your list of posts, nor in your RSS feed? You can, however, &lt;a href=&quot;/posts/draft/&quot;&gt;link&lt;/a&gt; directly to it.&lt;/p&gt;

&lt;p&gt;To make it go live, all you have to do is remove the &lt;code&gt;draft:true&lt;/code&gt; line, and you’re off to the races.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ll want to &lt;a href=&quot;https://github.com/holman/left#readme&quot;&gt;get the code&lt;/a&gt; and read the README to learn how to
install and set up Left for your own purposes.&lt;/p&gt;

&lt;p&gt;If you have any questions, follow and ping me on Twitter- I’m
&lt;a href=&quot;https://twitter.com/holman&quot;&gt;@holman&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>text analysis</title>
   <link href="http://username.github.io/2014/02/07/text-analysis"/>
   <updated>2014-02-07T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/07/text-analysis</id>
   <content type="html">
&lt;p&gt;http://www.etcml.com/&lt;/p&gt;

&lt;p&gt;http://wiki.blender.org/index.php/Dev:ZH/Ref/GoogleSummerOfCode/2012/Ideas&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>computational science</title>
   <link href="http://username.github.io/2014/01/14/computational-science"/>
   <updated>2014-01-14T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/14/computational-science</id>
   <content type="html">
&lt;p&gt;www.csee.wvu.edu/~xinl/source.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>best award paper</title>
   <link href="http://username.github.io/2014/01/01/best-award-paper"/>
   <updated>2014-01-01T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/01/best-award-paper</id>
   <content type="html">
&lt;p&gt;http://jeffhuang.com/best_paper_awards.html##&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>install redmine in ubuntu</title>
   <link href="http://username.github.io/2013/12/04/install-redmine-in-ubuntu"/>
   <updated>2013-12-04T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/12/04/install-redmine-in-ubuntu</id>
   <content type="html">
&lt;h1 id=&quot;redmine&quot;&gt;安装redmine出现权限问题的解决方法&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://redminecrm.com/boards/4/topics/448-installing-redmine-2-2-passenger-nginx-rvm-on-ubuntu-12-04&quot;&gt;install redmine on ubuntu12.04&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 777 #命令 来解决权限问题 
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>install World Community Grid on a headless Ubuntu Server</title>
   <link href="http://username.github.io/2013/11/19/install-world-community-grid-on-a-headless-ubuntu-server"/>
   <updated>2013-11-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/19/install-world-community-grid-on-a-headless-ubuntu-server</id>
   <content type="html">
&lt;h1 id=&quot;ubuntuboinc&quot;&gt;在ubuntu上安装BOINC&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get aptitude install boinc-client (you can also download it from wcg and install)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;find your account key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boinccmd --lookup_account http://www.worldcommunitygrid.org username password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should get a response something like this
dfb74c9b9…&lt;/p&gt;

&lt;p&gt;attach to your project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boinccmd --project_attach http://www.worldcommunitygrid.org dfb74c....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you want to verify your attached enter the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boinccmd --get_state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Futher resources:&lt;/p&gt;

&lt;p&gt;http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu&lt;/p&gt;

&lt;p&gt;http://boinc.berkeley.edu/wiki/Client_configuration&lt;/p&gt;

&lt;p&gt;http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC daemon_after_boot&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;p&gt;blog.joelchristian.com/?p=291&lt;/p&gt;

&lt;p&gt;misctechmusings.com/linux/boinc-cli-for-world-community-grid/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>a little surprised</title>
   <link href="http://username.github.io/2013/11/10/a-little-surprised"/>
   <updated>2013-11-10T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/10/a-little-surprised</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.jstatsoft.org/v27&quot;&gt;yihui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cos.name/2013/02/rise-of-the-machine/&quot;&gt;cos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.niemanlab.org/2013/11/matt-waite-how-i-faced-my-fears-and-learned-to-be-good-at-math/&quot;&gt;conquer math&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>data analysis</title>
   <link href="http://username.github.io/2013/11/09/data-analysis"/>
   <updated>2013-11-09T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/09/data-analysis</id>
   <content type="html">
&lt;p&gt;http://www.datagenetics.com/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>understand WSGI</title>
   <link href="http://username.github.io/2013/11/06/python-web"/>
   <updated>2013-11-06T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/06/python-web</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.myexception.cn/perl-python/1351788.html&quot;&gt;web.py源码解析&lt;/a&gt;
&lt;a href=&quot;http://ivory.idyll.org/articles/wsgi-intro/what-is-wsgi.html&quot;&gt;WSGI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;web server side:&lt;/p&gt;

&lt;p&gt;服务器必须做两件事情：&lt;/p&gt;

&lt;p&gt;一个environ字典和一个start_response函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iterable=app(environ,start_response)
for data in iterable:
    #send data to client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WSGI中分块传输大文件，使用yield：（rhodesmill.org/brandon/2013/chunked-wsgi）       &lt;/p&gt;

&lt;p&gt;后续：&lt;/p&gt;

&lt;p&gt;http://benosteen.wordpress.com&lt;/p&gt;

&lt;p&gt;My swiss army toolkit for distributed/multiproesssing systems&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>leaning python site</title>
   <link href="http://username.github.io/2013/11/05/leaning-python-site"/>
   <updated>2013-11-05T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/05/leaning-python-site</id>
   <content type="html">
&lt;h1 id=&quot;learning-python-sites&quot;&gt;Learning Python Sites&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;basic(初级)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://woodpecker.org.cn/abyteofpython_cn/chinese/&quot;&gt;A byte of Python(中文的)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.codecademy.com/zh/tracks/python&quot;&gt;codecademy课程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://inventwithpython.com/chapters/&quot;&gt;invent with python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;medium(中级)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过改错学习python &lt;a href=&quot;https://github.com/gregmalcolm/python_koans&quot;&gt;TDD 模式学习python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;advanced(高级)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://anandology.com/python-practice-book&quot;&gt;python practice book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kevinsheppard.com/images/0/09/Python_introduction.pdf&quot;&gt;python作统计分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tuiku.com&quot;&gt;tuiku&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;online game:
&lt;a href=&quot;http://www.checkio.org&quot;&gt;Game&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>deploy python on nginx</title>
   <link href="http://username.github.io/2013/11/04/deploy-python-on-nginx"/>
   <updated>2013-11-04T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/11/04/deploy-python-on-nginx</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;serholiu.com/tornado-nginx-supervisord&quot;&gt;tornado with nginx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/&quot;&gt;gunicorn with nginx&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>install project on preferati</title>
   <link href="http://username.github.io/2013/10/27/install-project-on-preferati"/>
   <updated>2013-10-27T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/27/install-project-on-preferati</id>
   <content type="html">
&lt;p&gt;Install OpenQuant Project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx
sudo apt-get install git
sudo apt-get install mysql-server
sudo apt-get install python-dev

install easy_install on ubuntu:
sudo apt-get install python-setuptools
sudo easy_install virtualenv
sudo easy_install pip
virtualenv ~/trade
source ~/trade/bin/activate
install numpy scipy pandas and ta-lib
sudo pip install Cython
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;due to blas libs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install gfortran libopenblas-dev liblapack-dev g++
pip install numpy
pip install scipy **install ta-lib**

cd ~
wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
sudo apt-get  install  build-essential
tar -zxvf ta-lib-0.4.0-src.tar.gz
cd ta-lib-0.4.0
./configure --prefix=/usr
make
sudo make install **install gevent**
wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar -zxvf 
./configure
make 
sudo make install



cd ~/www
git clone https://github.com/pydata/pandas.git
git clone https://github.com/mrjbq7/ta-lib.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;update the nginx&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-software-properties
sudo apt-get install sotware-properties-common
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;mysql init&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install mysql-server libmysqld-dev
pip install MySQL-python
insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;david&quot;,password(&quot;david&quot;)); **用户授权**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给本地用户mql分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123456。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;grant all privileges on *.* to david@localhost identified by &#39;david&#39;; **install redis**

http://rubyer.me/blog/638/ redis.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;uwsgi or gunicorn(optional)&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>how to write a crawler</title>
   <link href="http://username.github.io/2013/10/26/how-to-write-a-crawler"/>
   <updated>2013-10-26T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/26/how-to-write-a-crawler</id>
   <content type="html">
&lt;p&gt;http://www.emanueleminotto.it/how-to-write-a-crawler&lt;/p&gt;

&lt;p&gt;http://benosteen.wordpress.com/2010/02/11/my-swiss-army-toolkit-for-distributedmultiprocessing-systems/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>qt fourteen steps</title>
   <link href="http://username.github.io/2013/10/22/qt-fourteen-steps"/>
   <updated>2013-10-22T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/22/qt-fourteen-steps</id>
   <content type="html">
&lt;p&gt;1.Hello ,World!&lt;/p&gt;

&lt;p&gt;2.调用退出
3.家庭价值
4.使用窗口部件
5.组装积木
6.组装丰富的积木！
7.一个事物领导另一个
8.准备战斗
9.你可以使用加农炮了
10.像丝一样滑
11.给它一个炮弹
12.悬在空中的砖
13.游戏结束
14.面对墙壁&lt;/p&gt;

&lt;p&gt;同普通的 C++ 成员函数一样，槽函数也分为三种类型，即 public slots、private slots 和 protected slots。
public slots：在这个区内声明的槽意味着任何对象都可将信号与之相连接。这对于组件编程非常有用，你可以创建彼此互不了解的对象，将它们的信号与槽进行连接以便信息能够正确的传递。
protected slots：在这个区内声明的槽意味着当前类及其子类可以将信号与之相连接。这适用于那些槽，它们是类实现的一部分，但是其界面接口却面向外部。
private slots：在这个区内声明的槽意味着只有类自己可以将信号与之相连接。这适用于联系非常紧密的类。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>install numpy scipy on ubuntu</title>
   <link href="http://username.github.io/2013/10/18/install-numpy-scipy-on-ubuntu"/>
   <updated>2013-10-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/18/install-numpy-scipy-on-ubuntu</id>
   <content type="html">
&lt;h1 id=&quot;linuxnumpy-scipy&quot;&gt;linux上安装numpy scipy&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sudo pip install numpy
sudo apt-get install libatlas-base-dev gfortran
sudo pip install scipy
sudo pip install matplotlib   # recommended Line 2 was necessary for SciPy, otherwise it was complaining that BLAS and a Fortran compiler were missing. Note that gfortran replaces the package g77.
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>python machine learning</title>
   <link href="http://username.github.io/2013/10/17/python-machine-learning"/>
   <updated>2013-10-17T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/17/python-machine-learning</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.xavierdupre.fr/blog/2013-09-15_nojs.html&quot;&gt;python machine learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.yuanyong.org/blog/python/k-means-using-python&quot;&gt;k-means&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jmlr.org/mloss/&quot;&gt;JMLR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mloss.org/software/&quot;&gt;machine learning open source&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>git</title>
   <link href="http://username.github.io/2013/09/29/git"/>
   <updated>2013-09-29T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/09/29/git</id>
   <content type="html">
&lt;h1 id=&quot;git&quot;&gt;git学习资料&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/jbenet/ee6c9ac48068889b0912&quot;&gt;a gist for git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gitref.cyj.me/zh/remotes/&quot;&gt;git&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>nginx permission root</title>
   <link href="http://username.github.io/2013/09/18/nginx-permission-root"/>
   <updated>2013-09-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/09/18/nginx-permission-root</id>
   <content type="html">
&lt;h1 id=&quot;nginx-&quot;&gt;nginx 权限问题的解决方法&lt;/h1&gt;

&lt;p&gt;按照下面方法配置nginx时出现用户权限问题
	server{
	listen 4002;
	server_name localhost;
	access_log logs/access.log;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
   proxy_set_header X-Real-IP $remote_addr;
   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
   proxy_set_header Host $http_host;
   proxy_set_header X-NginxX-Proxy true;
   
   proxy_pass http://backend;
   proxy_redirect off;
   
   proxy_http_version 1.1;
   proxy_set_header Upgrade $http_upgrade;
   proxy_set_header Connection &quot;upgrade&quot;;
   }
   }
 upstream backend {
 server 127.0.0.1:3201;
 } 参照[nginx 13:permission denied solved](http://serverfault.com/questions/246609/trouble-with-nginx-and-serving-from-multiple-directories-under-the-same-domain)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The root directive is the problem here. Quote from the doc:&lt;/p&gt;

&lt;p&gt;note: Keep in mind that the root will still append the directory to the request so that a request for “/i/top.gif” will not look in “/spool/w3/top.gif” like might happen in an Apache-like alias configuration where the location match itself is dropped. Use the alias directive to achieve the Apache-like functionality.&lt;/p&gt;

&lt;p&gt;Basically, only use root for real roots: if the content is to be at / use root. If it’s going to end on a subfolder, use alias:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location  /map/ {
  alias  /home/user/public_html/map/;
} Also check what user nginx is running as and make sure that this user can access /home/user/public_html/map
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>asynchrous,synchrous,blocking,unblocking network</title>
   <link href="http://username.github.io/2013/09/12/asynchroussynchrousblockingunblocking-network"/>
   <updated>2013-09-12T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/09/12/asynchroussynchrousblockingunblocking-network</id>
   <content type="html">
&lt;p&gt;Linux下的五种I/O模型
阻塞I/O（blocking I/O）
非阻塞I/O（nonblocking I/O）&lt;br /&gt;
I/O服用（select和poll）（I/O multiplexing）
信号驱动I/O（signal driven I/O（SIGIO））
异步I/O（asynchronous I/O（the POSIX aio_functions))
前四种都是同步，只用最后一种是异步I/O&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>machine learning in action</title>
   <link href="http://username.github.io/machine%20learning/2013/08/08/machine-learning-in-action"/>
   <updated>2013-08-08T00:00:00+08:00</updated>
   <id>http://username.github.io/machine%20learning/2013/08/08/machine-learning-in-action</id>
   <content type="html">
&lt;p&gt;https://github.com/pbharrin/machinelearninginaction
zhan.renren.com/quantitativefinance?checked=true&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>webpy</title>
   <link href="http://username.github.io/2013/08/06/webpy"/>
   <updated>2013-08-06T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/08/06/webpy</id>
   <content type="html">
&lt;h1 id=&quot;webpy-&quot;&gt;webpy 中文文档学习目录&lt;/h1&gt;
&lt;p&gt;web py&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;安装 webpy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;webpy3.0 新手指南&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;webpy CookBook&lt;/a&gt;
## webpy基本应用:
&lt;a href=&quot;&quot;&gt;Hello World&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;提供静态文件访问&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;理解URL控制&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;跳转与重定向&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;使用子应用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;提供XML访问&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;从post读取原始数据&lt;/a&gt;
## 高级应用:
&lt;a href=&quot;&quot;&gt;用web.ctx获得客户端信息&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;应用处理器，添加钩子和卸载钩子&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何使用web.background&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;自定义NotFound信息&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何流传输大文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;对自带的webserver日志进行操作&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;用cherrypy提供SSL支持&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;实时语言切换&lt;/a&gt;
## Sessions and user state 会话和用户状态:
&lt;a href=&quot;&quot;&gt;如何使用Session&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何在调试模式下使用Session&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;在template中使用session&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何操作Cookie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;用户认证&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[一个在postgreSQL数据库环境下的用户认证的例子](()&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何在子应用中操作Session&lt;/a&gt;
## Utils 实用工具
&lt;a href=&quot;&quot;&gt;如何发送邮件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何利用Gmail发送邮件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;使用soaplib实现webservice&lt;/a&gt;
## Templates 模板
&lt;a href=&quot;&quot;&gt;Templetor: web.py 模板系统&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;使用站点布局模板&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;交替式风格 (未译)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;导入函数到模板中 (未译)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;模板文件中的i18n支持&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;在web.py中使用Mako模板引擎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;在web.py中使用Cheetah模板引擎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;在web.py中使用Jinja2模板引擎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;如何在谷歌应用程序引擎使用模板&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing-&quot;&gt;Testing 测试:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;Testing with Paste and Nose (未译)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;RESTful doctesting using an application’s request method (未译)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-input-&quot;&gt;User input 用户输入:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;文件上传&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;保存上传的文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;上传文件大小限定&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;通过 web.input 接受用户输入&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;怎样使用表单&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;显示个别表单字段&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;database-&quot;&gt;Database 数据库&lt;/h2&gt;
&lt;p&gt;使用多数据库&lt;/p&gt;

&lt;p&gt;Select: 查询数据&lt;/p&gt;

&lt;p&gt;Update: 更新数据&lt;/p&gt;

&lt;p&gt;Delete: 删除数据&lt;/p&gt;

&lt;p&gt;Insert: 新增数据&lt;/p&gt;

&lt;p&gt;Query: 高级数据库查询&lt;/p&gt;

&lt;p&gt;怎样使用数据库事务&lt;/p&gt;

&lt;p&gt;使用 sqlalchemy&lt;/p&gt;

&lt;p&gt;整合 SQLite UDF (用户定义函数) 到 webpy 数据库层&lt;/p&gt;

&lt;p&gt;使用字典动态构造where子句&lt;/p&gt;

&lt;h2 id=&quot;deployment-&quot;&gt;Deployment 部署:&lt;/h2&gt;
&lt;p&gt;通过Fastcgi和lighttpd部署&lt;/p&gt;

&lt;p&gt;通过Webpy和Nginx with FastCGI搭建Web.py&lt;/p&gt;

&lt;p&gt;CGI deployment through Apache (未译)&lt;/p&gt;

&lt;p&gt;mod-pythondeployment through Apache (requested)&lt;/p&gt;

&lt;p&gt;通过Apache和mod-wsgi部署&lt;/p&gt;

&lt;p&gt;mod-wsgi deployment through Nginx (未译)&lt;/p&gt;

&lt;p&gt;Fastcgi deployment through Nginx (未译)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jquery add element in the html dom</title>
   <link href="http://username.github.io/2013/07/29/jquery-add-element-in-the-html-dom"/>
   <updated>2013-07-29T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/29/jquery-add-element-in-the-html-dom</id>
   <content type="html">
&lt;h1 id=&quot;jquery&quot;&gt;使用jquery增加元素节点&lt;/h1&gt;

&lt;p&gt;add one element in the parent&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $li_1=$(&quot;&amp;lt;li&amp;gt;新增节点：数据结构&amp;lt;/li&amp;gt;&quot;);
var $li_2=$(&quot;&amp;lt;li&amp;gt;新增节点：设计模式&amp;lt;/li&amp;gt;&quot;);

var $parent=$(&quot;.nm_ul&quot;);
$parent.append($li_1);
$parent.append($li_2);
$parent.append($li_1).append($li_2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;add attribute in the added element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var $li_1=$(&quot;&amp;lt;li title=&#39;新增节点：数据结构&#39;&amp;gt;数据节点&amp;lt;/li&amp;gt;&quot;);
var $parent=$(&quot;.nm_ul&quot;);
$parent.append($li_1);
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>web.py note</title>
   <link href="http://username.github.io/2013/07/28/webpy-note"/>
   <updated>2013-07-28T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/28/webpy-note</id>
   <content type="html">
&lt;h1 id=&quot;webpy&quot;&gt;webpy学习笔记&lt;/h1&gt;

&lt;p&gt;web.ctx
web.loadhook(handler)函数在web请求前执行handler函数
web.unloadhook(handler)函数在web请求后执行的handler函数&lt;/p&gt;

&lt;p&gt;seeother:303临时重定向
redirect：301永久重定向&lt;/p&gt;

&lt;p&gt;seeother(../)seeother（/）前者返回到上层目录，后者重定向到当强目录，造成 无限次的重定向，是一种错误的用法。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sqlalchemy dynamic mapping</title>
   <link href="http://username.github.io/2013/07/26/sqlalchemy-dynamic-mapping"/>
   <updated>2013-07-26T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/26/sqlalchemy-dynamic-mapping</id>
   <content type="html">
&lt;h1 id=&quot;sqlalchemy&quot;&gt;sqlalchemy动态映射&lt;/h1&gt;
&lt;p&gt;代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sqlalchemy import *
from sqlalchemy.orm import *

metadata=MetaData(create_engine(&quot;sqlite://&quot;,echo=True)
t1=Table(&quot;t1&quot;,metadata,Column(&#39;id&#39;,Integer,primary_key=True))
t2=Table(&quot;t2&quot;,metadata,Column(&quot;id&quot;,Integer,primary_key=True))
metadata.create_all()

def map_class_to_some_table(cls,table,entity_name,**kw):
    newcls=type(entity_name,(cls,),{})
    mapper(newcls,table,**kw)
    return newcls
   
class Foo(object):
    pass

T1Foo=map_class_to_some_table(Foo,t1,&quot;T1Foo&quot;)
T2Foo=map_class_to_some_table(Foo,t2,&quot;T2Foo&quot;)

sess=sessionmaker()()
sess.add_all([T1Foo(),T1Foo(),T2Foo(),T1Foo()])
print sess.query(T1Foo).all()
print sess.query(T2Foo).all()
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>premature optimization</title>
   <link href="http://username.github.io/2013/07/26/premature-optimization"/>
   <updated>2013-07-26T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/26/premature-optimization</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://scientopia.org/blogs/goodmath/2011/05/03/the-perils-of-premature-optimization/&quot;&gt;premature optimization&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>memo on the trade</title>
   <link href="http://username.github.io/2013/07/22/memo-on-the-trade"/>
   <updated>2013-07-22T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/22/memo-on-the-trade</id>
   <content type="html">
&lt;p&gt;RTA github&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.lowindata.com&quot;&gt;backbonejs note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.icoding.co/2012/04/backbonejs-html-2&quot;&gt;backbonejs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/pyctp/&quot;&gt;pyctp&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>python asynchrous network</title>
   <link href="http://username.github.io/python%20network/2013/07/15/python-asynchrous-network"/>
   <updated>2013-07-15T00:00:00+08:00</updated>
   <id>http://username.github.io/python%20network/2013/07/15/python-asynchrous-network</id>
   <content type="html">
&lt;hr /&gt;
&lt;p&gt;select,poll,epoll test in python
——————————–&lt;/p&gt;

&lt;p&gt;selecttest.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import select
import socket
import Queue

#create a socket
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
#set option reused
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

server_address=(&#39;localhost&#39;,10001)
server.bind(server_address)

server.listen(10)

#sockets from which we except to read
inputs=[server]

#sockets from which we expect to write
outputs=[]

#Outgoing message queues (socket:Queue)
message_queues={}

#A optional parameter for select is TIMEOUT
timeout=20

while inputs:
    print &quot;waiting for next event&quot;
    #first parameter--read list,second parameter--write list,third parameter--error list
    readable,writable,exceptional=select.select(inputs,outputs,inputs,timeout)

    #when timeout reached,select return three empty list
    if not (readable or writable or exceptional):
        print &quot;Time out!&quot;
        break;
    for s in readable:
        if s is server:
            #A &quot;readable&quot; socket is ready to accept a connection
            connection,client_address=s.accept()
            print &quot;  connection from&quot;,client_address
            connection.setblocking(0)
            inputs.append(connection)
            message_queues[connection]=Queue.Queue()
        else:
            data=s.recv(1024)
            if data:
                print &quot;received &quot;,data, &quot;from &quot;,s.getpeername()
                message_queues[s].put(data)
                #Add output  channel for response
                if s not in outputs:
                    outputs.append(s)
            else:
                #Interpret empty result as closed connection
                print &quot; closing&quot;, client_address
                if s in outputs:
                    outputs.remove(s)
                inputs.remove(s)
                s.close()
                #remove message queue
                del message_queues[s]
    for s in writable:
        try:
            next_msg=message_queues[s].get_nowait()
        except Queue.Empty:
            print &quot; &quot;,s.getpeername,&quot; queue empty&quot;
            outputs.remove(s)
        else:
            print &quot;sending &quot;,next_msg,&quot; to&quot;,s.getpeername()
            s.send(next_msg)
    for s in exceptional:
        print &quot; exception condition on &quot;,s.getpeername()
        #stop listening for input on the connection
        inputs.remove(s)
        if s in outputs:
            outputs.remove(s)
        s.close()
        #Remove message queue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;polltest.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import socket
import select
import Queue

server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_address=(&quot;localhost&quot;,10001)

print &quot;Starting up on %s port %s&quot; % server_address
server.bind(server_address)
server.listen(5)
message_queues={}
#The timeout value is represente in milliseconds,instead of seconds
timeout=100
#Create a limit for the next
READ_ONLY=(select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR)
READ_WRITE=(READ_ONLY|select.POLLOUT)

#set up the poller
poller=select.poll()
poller.register(server,READ_ONLY)
#map file descriptors to socket objects
fd_to_socket={server.fileno():server,}
while True:
    print &quot;Waiting for the next event&quot;
    events=poller.poll(timeout)
    print &quot;*&quot;*20
    print len(events)
    print events
    print &quot;*&quot;*20
    for fd,flag in events:
        s=fd_to_socket[fd]
        if flag &amp;amp; (select.POLLIN|select.POLLPRI):
            if s is server:
                #A readable socket is ready to accept a connection
                connection,client_address=s.accept()
                print &quot;Connection &quot;,client_address
                connection.setblocking(False)

                fd_to_socket[connection.fileno()]=connection
                poller.register(connection,READ_ONLY)

                #Give the connection a queue to send data
                message_queues[connection]=Queue.Queue
            else:
                data=s.recv(1024)
                if data:
                    # A readable client socket has data
                    print &quot; received %s from %s &quot; % (data,s.getpeername())
                    message_queues[s].put(data)
                    poller.modify(s,READ_WRITE)
                else:
                    #Close the connection
                    print &quot; closing &quot;,s.getpeername()
                    #Stop listening for input on the connection
                    poller.unregister(s)
                    s.close()
                    del message_queues[s]
        elif flag &amp;amp; select.POLLHUP:
            #A client that &quot;Hang up&quot;,to be closed.
            print &quot;closing &quot;,s.getpeername,&quot;(HUP)&quot;
            poller.unregister(s)
            s.close()
        elif flag &amp;amp; select.POLLOUT:
            #SOCKET is ready to send DATA,if there is any to send
            try:
                next_msg=message_queues[s].get_nowait()
            except Queue.Empty:
                #No messages waiting so stop checking
                print s.getpeername,&quot; queue empty&quot;
                poller.modify(s,READ_ONLY)
            else:
                print &quot; sending %s to %s&quot; %(next_msg,s.getpeername())
                s.send(next_msg)
        elif flag &amp;amp; select.POLLERR:
            #Any events with POLLER cause the server to close the sockets
            print &quot; exception on&quot;,s.getpeername()
            poller.unregister(s)
            s.close()
            del message_queues[s]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;epolltest.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import socket,logging
import select,errno

logger=logging.getLogger(&quot;network-server&quot;)

def InitLog():
    logger.setLevel(logging.DEBUG)

    fh=logging.FileHandler(&quot;network-server.log&quot;)
    fh.setLevel(logging.DEBUG)
    ch=logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    formatter=logging.Formatter(&quot;%(asctime)s - %(name)s - %(levelname)s -%(message)s&quot;)
    ch.setFormatter(formatter)
    fh.setFormatter(formatter)

    logger.addHandler(fh)
    logger.addHandler(ch)

if __name__==&quot;__main__&quot;:
    InitLog()

    try:
        listen_fd=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    except socket.error,msg:
        logger.error(&quot;create a socket failed&quot;)

    try:
        listen_fd.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
    except socket.error,msg:
        logger.error(&quot;setsocketopt error&quot;)

    try:
        listen_fd.bind((&#39;&#39;,10001))
    except socket.error,msg:
        logger.error(&quot;listen file id bind ip error&quot;)

    try:
        listen_fd.listen(10)
    except socket.error,msg:
        logger.error(msg)
    try:
        epoll_fd=select.epoll()
        epoll_fd.register(listen_fd.fileno(),select.EPOLLIN)
    except select.error,msg:
        logger.error(msg)
    
    connections={}
    addresses={}
    datalist={}
    while True:
        epoll_list = epoll_fd.poll()
        for fd,events in epoll_list:
            if fd==listen_fd.fileno():
                conn,addr=listen_fd.accept()
                logger.debug(&quot;accept connction from  %s,%d,fd = %d&quot; %(addr[0],addr[1],conn.fileno()))
                conn.setblocking(0)
                epoll_fd.register(conn.fileno(),select.EPOLLIN|select.EPOLLET)
                connections[conn.fileno()]=conn 
                addresses[conn.fileno()]=addr
            elif select.EPOLLIN  &amp;amp; events:
                datas=&#39;&#39;
                while True:
                    try:
                        data=connections[fd].recv(10)
                        if not data and not datas:
                            epoll_fd.unregister(fd)
                            connections[fd].close()
                            logger.debug(&quot;%s,%d closed&quot; % (addresses[fd][0],addresses[fd][1]))
                            
                            break
                        else:
                            datas+=data 
                    except socket.error,msg:
                        if msg.errno==errno.EAGAIN:
                            logger.debug(&quot;%s receive %s&quot; % (fd,datas))
                            datalist[fd]=datas
                            epoll_fd.modify(fd,select.EPOLLET|select.EPOLLOUT)
                            break
                        else:
                            epoll_fd.unregister(fd)
                            connections[fd].close()
                            logger.error(msg)
                            break
            elif select.EPOLLHUP &amp;amp; events:
                epoll_fd.unregister(fd)
                connections[fd].close()
                logger.debug(&quot;%s ,%d closed&quot; % (addresses[fd][0],addresses[fd][1]))
            elif select.EPOLLOUT &amp;amp; events:
                sendLen=0
                while True:
                    sendLen += connections[fd].send(datalist[fd][sendLen:])
                    if sendLen == len(datalist[fd]):
                         break
                epoll_fd.modify(fd,select.EPOLLIN|select.EPOLLET)
            else:
                continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commontest.py(client code)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import socket
messages = [&quot;This is the message&quot;,
         &quot;It will be send&quot;,
         &quot;in parts&quot;]

print &quot;Connect to the server&quot;

server_address=(&quot;localhost&quot;,10001)

#Create a TCP/IP sock
socks=[]
for i in range(10):
     socks.append(socket.socket(socket.AF_INET,socket.SOCK_STREAM))

for s in socks:
    s.connect(server_address)

counter=0
for message in messages:
    for s in socks:
        counter+=1
        print &quot; %s sending %s &quot;%(s.getpeername(),message+&quot; version &quot;+str(counter))
        s.send(message+&quot; version &quot;+str(counter))
    for s in socks:
        data=s.recv(1024)
        print &quot; %s received %s &quot; % (s.getpeername(),data)
        if not data:
            print &quot;closing socket&quot;,s.getpeername()
            s.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;benchmark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对epoll的使用有一篇很好的&lt;a href=&quot;scotdoyle.com/python-epoll-howto.html&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;针对asyncore的介绍和使用有很好的两篇博客：&lt;a href=&quot;blog.csdn.net/livefun/article/details/8721772&quot;&gt;blog1&lt;/a&gt;
  &lt;a href=&quot;http://www.nightmare.com/medusa/async_sockets.html&quot;&gt;blog2&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Run Multiple-python on your ubuntu</title>
   <link href="http://username.github.io/2013/07/02/install-multiple-version-of-python-with-virtualenv"/>
   <updated>2013-07-02T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/02/install-multiple-version-of-python-with-virtualenv</id>
   <content type="html">
&lt;h1 id=&quot;ubuntupython&quot;&gt;ubuntu上安装多个版本的python&lt;/h1&gt;

&lt;p&gt;安装python3.3在ubuntu上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python3.3 建立软链接：

ln -s /usr/bin/python3.3 /usr/bin/python3.3m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安转python2.7.5再ubuntu上:    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python2.4 python2.5 python2.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用virtualenv来定制自己的环境&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virtualenv -p /usr/bin/python3.3 python3.3env
virtualenv -p /usr/bin/python2.7.5 python2.7.5env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>com learning</title>
   <link href="http://username.github.io/2013/06/14/com-learning"/>
   <updated>2013-06-14T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/06/14/com-learning</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.vckbase.com/index.php/wv/1315&quot;&gt;深入理解COM&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>protobuffer</title>
   <link href="http://username.github.io/2013/06/11/protobuffer"/>
   <updated>2013-06-11T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/06/11/protobuffer</id>
   <content type="html">
&lt;p&gt;google protobuffer待记&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>resolution to scipy installation error</title>
   <link href="http://username.github.io/python/2013/06/08/scipy-error"/>
   <updated>2013-06-08T00:00:00+08:00</updated>
   <id>http://username.github.io/python/2013/06/08/scipy-error</id>
   <content type="html">&lt;h1 id=&quot;ubuntuscipy&quot;&gt;ubuntu上安装scipy出错解决方法&lt;/h1&gt;

&lt;p&gt;安装scipy时出现Blas错误时，需安装以下几个包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get libblas3gf libblas-doc libblas-dev liblapack3gf liblapack-doc liblapack-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装matplib出现ft2build.h等头文件无法找出时，解决方法：
具体解决方案如下：
（1）安装freetype2开发包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libfreetype6-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（2）安装png开发包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libpng-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（3）安装matplotlib:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>install wine on ubuntu 12.04</title>
   <link href="http://username.github.io/linux/2013/06/06/wine-error"/>
   <updated>2013-06-06T00:00:00+08:00</updated>
   <id>http://username.github.io/linux/2013/06/06/wine-error</id>
   <content type="html">&lt;h1 id=&quot;wine-error&quot;&gt;Wine error&lt;/h1&gt;

&lt;p&gt;Code for install wine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo setcap CAP_NET_RAW=ep /usr/bin/wine
sudo setcap CAP_NET_RAW=ep /usr/bin/wineserver
sudo setcap CAP_NET_RAW=ep /путь_до_л2/l2.exe
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>install hdf5 on ubuntu</title>
   <link href="http://username.github.io/python/yt-project/2013/06/05/installhdf5"/>
   <updated>2013-06-05T19:11:11+08:00</updated>
   <id>http://username.github.io/python/yt-project/2013/06/05/installhdf5</id>
   <content type="html">&lt;h1 id=&quot;install-hdf5-on-ubuntu-1204&quot;&gt;install hdf5 on ubuntu 12.04&lt;/h1&gt;

&lt;p&gt;you can probably install the debian libraries into quantal with no issues, precise is less likely to work, but it might.&lt;/p&gt;

&lt;p&gt;possibly you will have to build it from source to get everything right.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$apt-get install devscripts equivs ubuntu-dev-tools 
$pull-debian-source hdf5 experimental    
$cd hdf5-*
$sudo mk-build-deps -ir
$debuild -us -uc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述方法现在已经不适用,Google后发现,可以直接使用hdf5二进制包,
由于本机为64bit linux,下载64位下的二进制包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.9/bin/linux-x86_64/hdf5-1.8.9-linux-x86_64-shared.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解压后，并在.bashrc中设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/hdf5-1.8.9-linux-x86_64-shared/lib
$export HDF5_DIR=$HOME/hdf5-1.8.9-linux-x86_64-shared
$source .bashrc 安装 blosc (可选)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装 lzo2-2 lzo2-dev&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lzo2-2 lzo2-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此HDF5可用&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>deep learning</title>
   <link href="http://username.github.io/machine/learning/2013/06/03/deep-learning"/>
   <updated>2013-06-03T00:00:00+08:00</updated>
   <id>http://username.github.io/machine/learning/2013/06/03/deep-learning</id>
   <content type="html">
&lt;h2 id=&quot;section&quot;&gt;机器学习的两次浪潮：&lt;/h2&gt;
&lt;p&gt;浅层机器学习模型：SVM、Boosting、最大熵方法（如LR，Logistic Regression)等
  这些模型的结构基本上可以看成带有一层隐层节点(如SVM、Boosting），或没有隐层节点（如LR）。这些模型无论实在理论分析还是应用中都获得了巨大的成功。相比之下，由于理论分析的难度大，这个时期浅层人工神经网络反而相对沉寂。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;深度学习：&lt;/h2&gt;
&lt;p&gt;很多隐层的人工神经网络具有优异的特征学习能力，学习得到的特征对数据有更本质的刻画，从而有利于可视化或分类。深度神经在训练上的难度，可以通过“逐层初始化”(layer-wisepre-training)来有效克服。&lt;/p&gt;

&lt;p&gt;以下资料可供学习入门:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://deepleaning.net/tutorial/deeplearning.pdf&quot;&gt;deep learning 入门&lt;/a&gt;	
  &lt;a href=&quot;http://markus.com/deep-learning-101/&quot;&gt;使用深度学习识别笔迹&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
